
{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Launches a Kafka cluster that leverages Exhibitor to find zookeeper instances.",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "m3.large",
      "AllowedValues" : [
        "t2.micro", "t2.small", "t2.medium",
        "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
        "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
        "hs1.8xlarge", "g2.2xlarge"
      ],
      "ConstraintDescription" : "must be a valid, HVM-compatible EC2 instance type."
    },
    "KeyName" : {
      "Description" : "Existing EC2 KeyPair to be associated with all cluster instances for SSH access. For default AMIs, log in as the 'ubuntu' user.",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "ClusterSize" : {
      "Description" : "Number of nodes to launch",
      "Type" : "Number",
      "Default": 2
    },
    "Subnets" : {
      "Description" : "List of VPC subnet IDs for the cluster. Note: must match up with the passed AvailabilityZones.",
      "Type" : "List<AWS::EC2::Subnet::Id>"
    },
    "VpcId" : {
      "Description" : "VPC associated with the provided subnets",
      "Type" : "AWS::EC2::VPC::Id"
    },
    "AdminSecurityGroup" : {
      "Description" : "Existing security group that should be granted administrative access to ZooKeeper (e.g., 'sg-123456')",
      "Type" : "AWS::EC2::SecurityGroup::Id"
    },
    "AvailabilityZones": {
      "Description" : "(Optional) If passed, only launch nodes in these AZs (e.g., 'us-east-1a,us-east-1b'). Note: these must match up with the passed Subnets.",
      "Type" : "CommaDelimitedList",
      "Default" : ""
    },
    "ExhibitorLoadBalancer": {
      "Description": "Exhibitor load balancer DNS Name, in the form of http(s)://some-load.balancer.elb.amazonaws.com (no trailing slash).",
      "Type": "String"
    },
    "ManagerClusterSize" : {
      "Description" : "Number of kafka manager nodes to launch",
      "Type" : "Number",
      "Default": 1
    },
    "ManagerInstanceType" : {
      "Description" : "Kafka Manager EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [
        "t2.micro", "t2.small", "t2.medium",
        "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
        "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
        "hs1.8xlarge", "g2.2xlarge"
      ],
      "ConstraintDescription" : "must be a valid, HVM-compatible EC2 instance type."
    },
    "AssociatePublicIpAddress": {
      "Description" : "(Optional) If false, EC2 instances will not be associated with a Public IP address.",
      "Type" : "String",
      "Default" : "true",
      "AllowedPattern" : "true|false"
    }
  },

  "Mappings" : {
    "RegionMap" : {
      "eu-west-1" : {
        "AMI" : "ami-c51e3eb6"
      }
    }
  },

  "Conditions" : {
    "UseAllAvailabilityZones" : {"Fn::Equals" : [{ "Fn::Join" : ["", {"Ref" : "AvailabilityZones"} ]}, ""]}
  },

  "Resources" : {
    "ManagerServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : {
          "Fn::If" : [
            "UseAllAvailabilityZones",
            { "Fn::GetAZs": "AWS::Region" },
            { "Ref" : "AvailabilityZones" }
          ]
        },
        "LaunchConfigurationName" : { "Ref" : "KafkaManagerLaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "1",
        "DesiredCapacity" : {"Ref": "ManagerClusterSize"},
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },
        "Tags" : [
          {
            "Key" : "role",
            "Value" : "kafka-manager",
            "PropagateAtLaunch" : "true"
          }
        ]
      }
    },

    "ServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : {
          "Fn::If" : [
            "UseAllAvailabilityZones",
            { "Fn::GetAZs": "AWS::Region" },
            { "Ref" : "AvailabilityZones" }
          ]
        },
        "LaunchConfigurationName" : { "Ref" : "KafkaLaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "9",
        "DesiredCapacity" : { "Ref" : "ClusterSize" },
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },
        "Tags" : [
          {
            "Key" : "role",
            "Value" : "kafka",
            "PropagateAtLaunch" : "true"
          }
        ]
      }
    },

    "KafkaLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"] },
        "SecurityGroups" : [ { "Ref" : "ServerSecurityGroup" }, { "Ref" : "AdminSecurityGroup" }  ],
        "AssociatePublicIpAddress": { "Ref" : "AssociatePublicIpAddress" },
        "InstanceType" : { "Ref" : "InstanceType" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -ex\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "#Install Java8 \n",
          "yum -y update --security \n",
          "yum -y install java-1.8.0-openjdk-devel aws-cfn-bootstrap \n",
          "yum -y remove java-1.7.0-openjdk \n",
          "export JAVA_HOME='/usr/lib/jvm/java-1.8.0-openjdk'  \n",
          "#Setting the JVM TTL for DNS Name Lookups - AWS \n",
          "cd $JAVA_HOME \n",
          "cd jre/lib/security \n",
          "sed -i '/networkaddress.cache.ttl=/ c\\networkaddress.cache.ttl=60' java.security \n",
          "export KAFKA_HEAP_OPTS='-Xmx512M -Xms256M' \n",

          "# Download Confluent Kafka Open Source\n",
          "rpm --import http://packages.confluent.io/rpm/3.1/archive.key \n",
          "echo '[Confluent.dist]' > /etc/yum.repos.d/confluent.repo  \n",
          "echo 'name=Confluent repository (dist)' >> /etc/yum.repos.d/confluent.repo  \n",
          "echo 'baseurl=http://packages.confluent.io/rpm/3.1/7' >> /etc/yum.repos.d/confluent.repo  \n",
          "echo 'gpgcheck=1' >> /etc/yum.repos.d/confluent.repo  \n",
          "echo 'gpgkey=http://packages.confluent.io/rpm/3.1/archive.key' >> /etc/yum.repos.d/confluent.repo  \n",
          "echo 'enabled=1' >> /etc/yum.repos.d/confluent.repo  \n",
          "echo '' >> /etc/yum.repos.d/confluent.repo  \n",
          "echo '[Confluent]' >> /etc/yum.repos.d/confluent.repo  \n",
          "echo 'name=Confluent repository' >> /etc/yum.repos.d/confluent.repo  \n",
          "echo 'baseurl=http://packages.confluent.io/rpm/3.1' >> /etc/yum.repos.d/confluent.repo  \n",
          "echo 'gpgcheck=1' >> /etc/yum.repos.d/confluent.repo  \n",
          "echo 'gpgkey=http://packages.confluent.io/rpm/3.1/archive.key' >> /etc/yum.repos.d/confluent.repo  \n",
          "echo 'enabled=1' >> /etc/yum.repos.d/confluent.repo  \n",
          "yum clean all \n",
          "yum -y install confluent-platform-oss-2.11 jq\n",

          "#Set HOSTNAME value  \n",
          "#Set HOSTNAME value  \n",
          "HOSTNAME=\"\" \n",
          "if [ ", { "Ref": "AssociatePublicIpAddress" }, " == \"true\" ] \n",
          "then \n",
		      "  HOSTNAME=`/opt/aws/bin/ec2-metadata --public-hostname | awk '{print $2}'`\n",
          "else \n",
          "  HOSTNAME=`/opt/aws/bin/ec2-metadata --local-hostname | awk '{print $2}' |  awk -F'.' '{print $1}'` \n",
          "fi \n",

          "sed -i \"/^127.0.0.1/ s/$/ $HOSTNAME/\" /etc/hosts \n",

          "# Config Kafka\n",
          "export IP=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`\n",
          "cd /etc/kafka \n",
          "sed -i \"/broker.id=0/ c\\broker.id=${IP##*.}\" server.properties \n",
          "export EX_DATA=`curl -s ", {"Ref": "ExhibitorLoadBalancer"}, "/exhibitor/v1/cluster/list`\n",
          "export ZK_PORT=`echo $EX_DATA | jq -r '.port'`\n",
          "export ZK_HOSTS=`echo $EX_DATA | jq -r '.servers | join(\":\" + env.ZK_PORT + \",\")'`:$ZK_PORT \n",
          "sed -i \"/zookeeper.connect=/ c\\zookeeper.connect=${ZK_HOSTS}\" server.properties \n",
          "sed -i \"s-#listeners=PLAINTEXT://:9092-listeners=PLAINTEXT://0.0.0.0:9092-\" server.properties \n",
          "sed -i \"s-#advertised.listeners=PLAINTEXT://your.host.name:9092-advertised.listeners=PLAINTEXT://${IP}:9092-\" server.properties \n",
          "sed -i '/confluent.support.metrics.enable=true/ c\\confluent.support.metrics.enable=false' server.properties \n",
          "export KAFKA_JMX_OPTS=\"-Djava.rmi.server.hostname=${IP} -Dcom.sun.management.jmxremote.rmi.port=8004 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.ssl=false \" \n",
          "export JMX_PORT=8004 \n",

          "# Runnig Kafka\n",
          "/usr/bin/kafka-server-start /etc/kafka/server.properties \n",

          "# All is well so signal success\n",
          "cfn-signal -e 0 -r \"Stack setup complete\" '", { "Ref" : "WaitHandle" }, "'\n",

          "#EOF"
        ]]}}
      }
    },

    "KafkaManagerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
          "KeyName" : { "Ref" : "KeyName" },
          "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"] },
          "SecurityGroups" : [ { "Ref" : "ServerSecurityGroup" }, { "Ref" : "AdminSecurityGroup" }  ],
          "AssociatePublicIpAddress": { "Ref" : "AssociatePublicIpAddress" },
          "InstanceType" : {"Ref": "ManagerInstanceType"},
          "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -ex\n",

            "# Helper function\n",
            "function error_exit\n",
            "{\n",
            "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
            "  exit 1\n",
            "}\n",

            "#Install Java8 \n",
            "yum -y update --security \n",
            "yum -y install java-1.8.0-openjdk-devel aws-cfn-bootstrap \n",
            "yum -y remove java-1.7.0-openjdk \n",
            "export JAVA_HOME='/usr/lib/jvm/java-1.8.0-openjdk'  \n",
            "#Setting the JVM TTL for DNS Name Lookups - AWS \n",
            "cd $JAVA_HOME \n",
            "cd jre/lib/security \n",
            "sed -i '/networkaddress.cache.ttl=/ c\\networkaddress.cache.ttl=60' java.security \n",

            "#Install Sbt and Jq \n",
            "curl https://bintray.com/sbt/rpm/rpm | sudo tee /etc/yum.repos.d/bintray-sbt-rpm.repo  \n",
            "yum -y install sbt jq \n",

            "#Install Kafka Manager Using release \n",
            "#mkdir -p /opt/kafka-manager  \n",
            "#mkdir -p /tmp/kafka-manager  \n",
            "#curl -Lo /tmp/kafka-manager.tar.gz https://github.com/yahoo/kafka-manager/archive/1.3.1.8.tar.gz \n",
            "#tar -zxf /tmp/kafka-manager.tar.gz -C /tmp/kafka-manager --strip-components=1 \n",
            "#rm -f /tmp/kafka-manager.tar.gz \n",

            "#Install Kafka Manager Using git \n",
            "yum -y install git \n",
            "cd /tmp \n",
            "git clone https://github.com/yahoo/kafka-manager.git \n",
            "cd kafka-manager \n",
            "git fetch origin pull/282/head:0.10.0 \n",
            "git checkout 0.10.0 \n",
            "echo 'scalacOptions ++= Seq(\"-Xmax-classfile-name\", \"200\")' >> build.sbt  \n",
            "./sbt clean dist \n",
            "cd /tmp \n",
            "unzip /tmp/kafka-manager/target/universal/kafka-manager-*.zip \n",
            "cd kafka-manager-* \n",
            "cp -r . /opt/kafka-manager \n",
            "rm -rf /tmp/kafka-manager-* /root/.sbt /root/.ivy2 \n",

            "#Config Kafka Manager \n",
            "export EX_DATA=`curl -s ", {"Ref": "ExhibitorLoadBalancer"}, "/exhibitor/v1/cluster/list`\n",
            "export ZK_PORT=`echo $EX_DATA | jq -r '.port'`\n",
            "export ZK_HOSTS=`echo $EX_DATA | jq -r '.servers | join(\":\" + env.ZK_PORT + \",\")'`:$ZK_PORT \n",

            "#Running Kafka Manager \n",
            "cd /opt/kafka-manager \n",
            "/opt/kafka-manager/bin/kafka-manager \n",

            "# All is well so signal success\n",
            "cfn-signal -e 0 -r \"Stack setup complete\" '", { "Ref" : "WaitHandle" }, "'\n",

            "#EOF"
          ]]}}
      }
    },

    "ClientSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "For ZooKeeper clients. Grants access to the associated ZooKeeper cluster.",
        "VpcId" : { "Ref" : "VpcId" }
      }
    },

    "ServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable Kafka and zookeeper access",
        "VpcId" : { "Ref" : "VpcId" },
        "SecurityGroupIngress" :
          [ { "IpProtocol" : "tcp", "FromPort" : "9092", "ToPort" : "9092", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
            { "IpProtocol" : "tcp", "FromPort" : "2181", "ToPort" : "2181", "SourceSecurityGroupId" : { "Ref" : "ClientSecurityGroup"} },
            { "IpProtocol" : "tcp", "FromPort" : "9092", "ToPort" : "9092", "SourceSecurityGroupId" : { "Ref" : "ClientSecurityGroup"} }]
      }
    },

    "LbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable Exhibitor access",
        "VpcId" : { "Ref" : "VpcId" },
        "SecurityGroupIngress" :
          [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "ClientSecurityGroup"} } ]
      }
    },

    "SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "ServerSecurityGroup" },
        "IpProtocol": "-1",
        "FromPort": "0",
        "ToPort": "65535",
        "SourceSecurityGroupId": { "Ref": "ServerSecurityGroup" }
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    }
  },
  "Outputs" : {

  }
}
